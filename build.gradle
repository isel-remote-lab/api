plugins {
	id 'org.jetbrains.kotlin.jvm' version '1.9.25'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.9.25'
	id 'org.springframework.boot' version '3.4.3'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'rl'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'

	// To get the DI annotation
	implementation 'jakarta.inject:jakarta.inject-api:2.0.1'

	// for JDBI
	implementation 'org.jdbi:jdbi3-core:3.37.1'
	implementation 'org.jdbi:jdbi3-kotlin:3.37.1'
	implementation 'org.jdbi:jdbi3-postgres:3.37.1'
	implementation 'org.postgresql:postgresql:42.7.2'

	// For Jackson
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.18.0'
	implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.18.0'

	implementation 'org.jetbrains.kotlin:kotlin-reflect'

	// To use Kotlin specific date and time functions
	implementation 'org.jetbrains.kotlinx:kotlinx-datetime:0.4.1'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.jetbrains.kotlin:kotlin-test-junit5'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'


}

kotlin {
	compilerOptions {
		freeCompilerArgs.addAll '-Xjsr305=strict'
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

tasks.test {
	useJUnitPlatform()
	if (System.getenv("DB_URL") == null) {
		environment("DB_URL", "jdbc:postgresql://localhost:5432/db?user=dbuser&password=changeit")
	}
	dependsOn("dbTestsWait")
	finalizedBy("dbTestsDown")
}

/**
 * DB related tasks
 * - To run `psql` inside the container, do
 *      docker exec -ti db-tests psql -d db -U dbuser -W
 *   and provide it with the same password as define on `docker/Dockerfile-db-tests`
 */

def dockerComposePath = "${projectDir}/docker-compose.yml"

tasks.register('dbTestsUp', Exec) {
	commandLine("docker", "compose", "-f", dockerComposePath, "up", "-d", "--build", "--force-recreate", "db-tests")
}

tasks.register('dbTestsWait', Exec) {
	commandLine("docker", "exec", "db-tests", "/app/bin/wait-for-postgres.sh", "localhost")
	dependsOn("dbTestsUp")
}

tasks.register('dbTestsDown', Exec) {
	commandLine("docker", "compose", "-f", dockerComposePath, "down", "db-tests")
}
